require 'rake'

# default rake task
task :default => :test
M = 10**6
K = 10**3

# giving args to rake:
#   - rake "test[10]"
#
# 10 million points as the base case for testing, vary thread
# then vary threads, running 1/million per thread (1-32?)
# then testing different startegies efficiencies (vs orig)
#   - greedy strategy (max threads)
#   - dynamic work threshold
#   - static work threshold
# Compile java
task :compile do
  system 'cd ../orig && make'
  system 'cd ../src && make'
end

# Write points to file
task :points do |t, p|
  POINTS = 10*M
  File.write('points.txt', `rake setup[#{POINTS}]`)
  system 'mv points.txt ../src'
end

# Create test data for project
task :setup, [:points] do |t, p|
  p[:points].to_i.times { |x| puts rand(p[:points].to_i).to_s +
                          " " + rand(p[:points].to_i).to_s }
end

# Test program performance
task :test => :compile do

  # ORIGINAL BASE VERSION (SINGLE THREAD)
  # Base case - only vary the number of points
  puts 'ORIGINAL BASE VERSION (SINGLE THREAD)'
  threads = [1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48]
  threads.each do |i|
    points = i * 10*K
    puts "Points #{i}: ",
      `cd ../orig && java MST -a 0 -n #{points} -f points`
  end

  # OUR MANY THREADED VERSIONS (constant threads)
  # Base case - only vary the number of threads
  puts 'THREADED VERSION (10M points)'
  points = 10*K
  threads.each do |i|
    puts "Threads #{i}: ",
      `cd ../src && java MST -a 0 -t #{i} -n #{points} -f points`
  end

  # Vary both the threads and the number of points
  puts 'THREADED VERSION (10M/thread points)'
  threads.each do |i|
    points = i * 10*K
    puts "Threads #{i}: ",
      `cd ../src && java MST -a 0 -t #{i} -n #{points}`
  end
end

